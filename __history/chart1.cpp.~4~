//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "chart1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
int i=0;
int t=50;
double dt=t/1000;
int window=10;
int mini=0,maxi=window;
double u=0,newu=0;
double u1=0,u0=0,d2u=0,du=0;
double x=0.3,v=0;
double k1,k2,k3,k4,l1,l2,l3,l4;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
Timer1->Interval=t;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Button1Click(TObject *Sender)
{
Timer1->Enabled=true;
/*for (int j=0;j<1000;j++)
{
	 k2 = v + l1*dt / 2;
	l2 = dv(x + k1*dt / 2, v + l1*dt / 2);

	k3 = v + l2*dt / 2;
	l3 = dv(x + k2*dt / 2, v + l2*dt / 2);

	k4 = v + l3*dt;
	l4 = dv(x + k3*dt, v + l3*dt);


// x value
	x = x + dt / 6.0 * (k1 + 2 * k2 + 2 * k3 + k4);

// v value
	v = v + dt / 6.0 * (l1 + 2 * l2 + 2 * l3 + l4);
   Series2->AddXY(j*dt,x);
}                        */
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Button2Click(TObject *Sender)
{
Timer1->Enabled=false;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Timer1Timer(TObject *Sender)
{
// bemenet 2szeres derivált
/*u=newu;
d2u=(u-2*u1+u0)/dt/dt;
du=(u-u1)/dt;
u0=u1;
u1=u;          */

	  //rk4

	 k2 = v + l1*dt / 2;
	l2 = dv(x + k1*dt / 2, v + l1*dt / 2);

	k3 = v + l2*dt / 2;
	l3 = dv(x + k2*dt / 2, v + l2*dt / 2);

	k4 = v + l3*dt;
	l4 = dv(x + k3*dt, v + l3*dt);


// x value
	x = x + dt / 6.0 * (k1 + 2 * k2 + 2 * k3 + k4);

// v value
	v = v + dt / 6.0 * (l1 + 2 * l2 + 2 * l3 + l4);
   Series2->AddXY(i*dt,x);


// Grafikon kitöltése
//Series1->AddXY(i*dt,sin(i*dt*2*3.1416*0.25));
//Series2->AddXY(i*dt,du);

// Grafikon "window" secenként
/*maxi=floor(i*dt/window)*window+window;
mini=maxi-window;
Chart1->BottomAxis->Maximum=maxi+(mini>0)*i*dt;
Chart1->BottomAxis->Minimum=mini+(mini>0)*i*dt;*/

// Grafikon "window" seces csúszó ablakban
Chart1->BottomAxis->Maximum=(floor(i*dt/window)>0)*(i*dt-window)+window;
Chart1->BottomAxis->Minimum=(floor(i*dt/window)>0)*(i*dt-window);
 i++;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::ScrollBar1Change(TObject *Sender)
{
newu=(ScrollBar1->Position-100)/20.0;
}
double __fastcall TForm1::dv(double x, double v)
{
double dv;
dv=(-cc*v-kk*x)/mm;
return dv;
}
//---------------------------------------------------------------------------
